#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from confluo.rpc import rpc_service
from confluo.rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void register_handler()')
    print('  void deregister_handler()')
    print('  i64 create_atomic_multilog(string name, rpc_schema schema, rpc_storage_mode mode)')
    print('  rpc_atomic_multilog_info get_atomic_multilog_info(string name)')
    print('  void remove_atomic_multilog(i64 multilog_id)')
    print('  void add_index(i64 multilog_id, string field_name, double bucket_size)')
    print('  void remove_index(i64 multilog_id, string field_name)')
    print('  void add_filter(i64 multilog_id, string filter_name, string filter_expr)')
    print('  void remove_filter(i64 multilog_id, string filter_name)')
    print('  void add_aggregate(i64 mutlilog_id, string aggregate_name, string filter_name, string aggregate_expr)')
    print('  void remove_aggregate(i64 multilog_id, string aggregate_name)')
    print('  void add_trigger(i64 multilog_id, string trigger_name, string trigger_expr)')
    print('  void remove_trigger(i64 multilog_id, string trigger_name)')
    print('  i64 append(i64 multilog_id, string data)')
    print('  i64 append_json(i64 multilog_id, string data)')
    print('  i64 append_batch(i64 multilog_id, rpc_record_batch batch)')
    print('  string read(i64 multilog_id, i64 offset, i64 nrecords)')
    print('  string read_json(i64 multilog_id, i64 offset, i64 nrecords)')
    print('  string query_aggregate(i64 multilog_id, string aggregate_name, i64 begin_ms, i64 end_ms)')
    print('  string adhoc_aggregate(i64 multilog_id, string aggregate_expr, string filter_expr)')
    print('  rpc_iterator_handle adhoc_filter(i64 multilog_id, string filter_expr)')
    print('  rpc_iterator_handle predef_filter(i64 multilog_id, string filter_name, i64 begin_ms, i64 end_ms)')
    print('  rpc_iterator_handle combined_filter(i64 multilog_id, string filter_name, string filter_expr, i64 begin_ms, i64 end_ms)')
    print('  rpc_iterator_handle alerts_by_time(i64 multilog_id, i64 begin_ms, i64 end_ms)')
    print('  rpc_iterator_handle alerts_by_trigger_and_time(i64 multilog_id, string trigger_name, i64 begin_ms, i64 end_ms)')
    print('  rpc_iterator_handle get_more(i64 multilog_id, rpc_iterator_descriptor desc)')
    print('  i64 num_records(i64 multilog_id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = rpc_service.Client(protocol)
transport.open()

if cmd == 'register_handler':
    if len(args) != 0:
        print('register_handler requires 0 args')
        sys.exit(1)
    pp.pprint(client.register_handler())

elif cmd == 'deregister_handler':
    if len(args) != 0:
        print('deregister_handler requires 0 args')
        sys.exit(1)
    pp.pprint(client.deregister_handler())

elif cmd == 'create_atomic_multilog':
    if len(args) != 3:
        print('create_atomic_multilog requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_atomic_multilog(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_atomic_multilog_info':
    if len(args) != 1:
        print('get_atomic_multilog_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_atomic_multilog_info(args[0],))

elif cmd == 'remove_atomic_multilog':
    if len(args) != 1:
        print('remove_atomic_multilog requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_atomic_multilog(eval(args[0]),))

elif cmd == 'add_index':
    if len(args) != 3:
        print('add_index requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_index(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'remove_index':
    if len(args) != 2:
        print('remove_index requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_index(eval(args[0]), args[1],))

elif cmd == 'add_filter':
    if len(args) != 3:
        print('add_filter requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_filter(eval(args[0]), args[1], args[2],))

elif cmd == 'remove_filter':
    if len(args) != 2:
        print('remove_filter requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_filter(eval(args[0]), args[1],))

elif cmd == 'add_aggregate':
    if len(args) != 4:
        print('add_aggregate requires 4 args')
        sys.exit(1)
    pp.pprint(client.add_aggregate(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'remove_aggregate':
    if len(args) != 2:
        print('remove_aggregate requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_aggregate(eval(args[0]), args[1],))

elif cmd == 'add_trigger':
    if len(args) != 3:
        print('add_trigger requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_trigger(eval(args[0]), args[1], args[2],))

elif cmd == 'remove_trigger':
    if len(args) != 2:
        print('remove_trigger requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_trigger(eval(args[0]), args[1],))

elif cmd == 'append':
    if len(args) != 2:
        print('append requires 2 args')
        sys.exit(1)
    pp.pprint(client.append(eval(args[0]), args[1],))

elif cmd == 'append_json':
    if len(args) != 2:
        print('append_json requires 2 args')
        sys.exit(1)
    pp.pprint(client.append_json(eval(args[0]), args[1],))

elif cmd == 'append_batch':
    if len(args) != 2:
        print('append_batch requires 2 args')
        sys.exit(1)
    pp.pprint(client.append_batch(eval(args[0]), eval(args[1]),))

elif cmd == 'read':
    if len(args) != 3:
        print('read requires 3 args')
        sys.exit(1)
    pp.pprint(client.read(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'read_json':
    if len(args) != 3:
        print('read_json requires 3 args')
        sys.exit(1)
    pp.pprint(client.read_json(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'query_aggregate':
    if len(args) != 4:
        print('query_aggregate requires 4 args')
        sys.exit(1)
    pp.pprint(client.query_aggregate(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'adhoc_aggregate':
    if len(args) != 3:
        print('adhoc_aggregate requires 3 args')
        sys.exit(1)
    pp.pprint(client.adhoc_aggregate(eval(args[0]), args[1], args[2],))

elif cmd == 'adhoc_filter':
    if len(args) != 2:
        print('adhoc_filter requires 2 args')
        sys.exit(1)
    pp.pprint(client.adhoc_filter(eval(args[0]), args[1],))

elif cmd == 'predef_filter':
    if len(args) != 4:
        print('predef_filter requires 4 args')
        sys.exit(1)
    pp.pprint(client.predef_filter(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'combined_filter':
    if len(args) != 5:
        print('combined_filter requires 5 args')
        sys.exit(1)
    pp.pprint(client.combined_filter(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'alerts_by_time':
    if len(args) != 3:
        print('alerts_by_time requires 3 args')
        sys.exit(1)
    pp.pprint(client.alerts_by_time(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'alerts_by_trigger_and_time':
    if len(args) != 4:
        print('alerts_by_trigger_and_time requires 4 args')
        sys.exit(1)
    pp.pprint(client.alerts_by_trigger_and_time(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'get_more':
    if len(args) != 2:
        print('get_more requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_more(eval(args[0]), eval(args[1]),))

elif cmd == 'num_records':
    if len(args) != 1:
        print('num_records requires 1 args')
        sys.exit(1)
    pp.pprint(client.num_records(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
